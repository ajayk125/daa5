def is_safe(board, row, col, n):
    for i in range(row):
        if board[i][col] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False    
    return True
def solve_nqueens(board, row, n):
    if row == n:
        return True    
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            if solve_nqueens(board, row + 1, n):
                return True    
            board[row][col] = 0
    return False

def print_board(board):
    for row in board:
        print(" ".join("Q" if cell == 1 else "." for cell in row))

def nqueens(n):
    board = [[0] * n for _ in range(n)]
    board[0][0] = 1
    if not solve_nqueens(board, 1, n):
        print("No solution exists.")
    else:
        print_board(board)
nqueens(8)












def is_safe(board, row, col, n):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i][col] == 1:
            return False
    
    # Check upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    # Check upper right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False
    
    return True

def solve_nqueens(board, row, n):
    if row == n:
        # All queens are placed successfully
        return True
    
    for col in range(n):
        if is_safe(board, row, col, n):
            # Place the queen
            board[row][col] = 1

            # Recur to place the remaining queens
            if solve_nqueens(board, row + 1, n):
                return True  # If a solution is found, stop the recursion
            
            # If placing the queen in the current position doesn't lead to a solution,
            # backtrack and try the next column
            board[row][col] = 0

    # If no column is suitable, return False to trigger backtracking
    return False

def print_board(board):
    for row in board:
        print(" ".join("Q" if cell == 1 else "." for cell in row))

def nqueens(n):
    # Initialize an empty chessboard
    board = [[0] * n for _ in range(n)]

    # Place the first queen in the first row
    board[0][0] = 1

    # Solve the N-Queens problem using backtracking
    if not solve_nqueens(board, 1, n):
        print("No solution exists.")
    else:
        print_board(board)

# Example usage:
nqueens(8)























def n_queens(n):
    col = set()
    posDiag = set()  # (r+c)
    negDiag = set()  # (r-c)
    res = []
    board = [["0"] * n for i in range(n)]

    def backtrack(r):
        if r == n:
            copy = [" ".join(row) for row in board]
            res.append(copy)
            return

        for c in range(n):
            if c in col or (r+c) in posDiag or (r-c) in negDiag:
                continue

            col.add(c)
            posDiag.add(r+c)
            negDiag.add(r-c)
            board[r][c] = "1"

            backtrack(r+1)

            col.remove(c)
            posDiag.remove(r+c)
            negDiag.remove(r-c)
            board[r][c] = "0"

    backtrack(0)  # Call the backtrack function with the initial row value

    for sol in res:
        for row in sol:
            print(row)
        print()

if __name__ == "__main__":
    n_queens(8)
